{"version":3,"sources":["serviceWorker.ts","features/Login/auth-reducer.ts","api/api-settings.ts","api/todolist-api.ts","api/auth-api.ts","utils/error-utils.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","api/task-api.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AUTH_ACTIONS_TYPE","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","id","title","put","delete","post","get","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","APP_ACTIONS_TYPE","initialState","isLoggedIn","setIsLoggedInAC","value","type","SET_IS_LOGGED_IN","TODOLISTS_ACTIONS_TYPE","status","isInitialized","SET_STATUS","SET_ERROR","initializeAppTC","then","res","resultCode","SET_IS_INITIALIZED","catch","TaskPriorities","TaskStatusesType","changeTodolistFilterAC","filter","CHANGE_TODOLIST_FILTER","getTodolistsTC","todolists","SET_TODOLISTS","removeTodolistTC","entityStatus","CHANGE_TODOLIST_ENTITY_STATUS","changeTodolistEntityStatusAC","REMOVE_TODOLIST","removeTodolistAC","addTodolistTC","todolist","item","ADD_TODOLIST","changeTodolistTitleTC","CHANGE_TODOLIST_TITLE","changeTodolistTitleAC","AddItemForm","React","memo","props","useState","setTitle","setError","add","trim","addItem","TextField","variant","size","label","onChange","e","currentTarget","onKeyPress","ctrlKey","key","helperText","disabled","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","TASKS_ACTIONS_TYPE","tasksAPI","todolistId","count","page","taskId","model","changeTaskEntityStatusAC","CHANGE_TASK_ENTITY_STATUS","getTasksTC","tasks","SET_TASKS","setTasksAC","items","addTaskTC","todolistID","task","ADD_TASK","removeTaskTC","todoListID","taskID","REMOVE_TASK","updateTaskTC","domainModel","getState","find","t","startDate","priority","description","deadline","UPDATE_TASK","updateTaskAC","Task","useDispatch","changeTitleTaskHandler","useCallback","className","Completed","Checkbox","checked","New","Delete","Todolist","demo","useEffect","useSelector","state","filteredTasks","filterTasks","addTask","setAll","setActive","setCompleted","changeTodolistTitleHandler","style","listStyleType","paddingLeft","map","ButtonGroup","Button","TodolistsList","auth","addTodolist","Grid","container","Box","p","pl","spacing","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","loginHandler","history","push","logoutHandler","AppBar","position","Toolbar","Typography","LinearProgress","Container","fixed","path","exact","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","action","tl","todoListId","rest","copyState","forEach","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","createHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.b143b1e0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {Dispatch} from 'redux'\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\nimport {authAPI, LoginParamsType} from '../../api/auth-api';\n\nenum AUTH_ACTIONS_TYPE {\n   SET_IS_LOGGED_IN = 'AUTH/SET-IS-LOGGED-IN',\n}\n\nconst initialState = {\n   isLoggedIn: false\n}\n\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n   switch (action.type) {\n      case AUTH_ACTIONS_TYPE.SET_IS_LOGGED_IN:\n         return {...state, isLoggedIn: action.value}\n      default:\n         return state\n   }\n}\n\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n   ({type: AUTH_ACTIONS_TYPE.SET_IS_LOGGED_IN, value} as const)\n\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\n   dispatch(setAppStatusAC('loading'));\n\n   authAPI.login(data)\n      .then((res) => {\n         if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(true));\n            dispatch(setAppStatusAC('succeeded'));\n         } else {\n            handleServerAppError(res.data, dispatch);\n         }\n      })\n      .catch(error => {\n         handleServerNetworkError(error, dispatch);\n      })\n}\n\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n   dispatch(setAppStatusAC('loading'))\n   authAPI.logout()\n      .then(res => {\n         if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(false))\n            dispatch(setAppStatusAC('succeeded'))\n         } else {\n            handleServerAppError(res.data, dispatch)\n         }\n      })\n      .catch((error) => {\n         handleServerNetworkError(error, dispatch)\n      })\n}\n\n\n// types\nexport type InitialStateType = typeof initialState\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType","import axios from 'axios';\n\nexport const settings = {\n   withCredentials: true,\n   headers: {\n      'API-KEY': '89e8e364-2267-45f8-866b-f315992878e1'\n   }\n}\n\nexport let instance = axios.create({\n   baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n   ...settings\n})\n\n\n// types\nexport type BaseResponseType<D = {}> = {\n   resultCode: number\n   messages: string[],\n   fieldsErrors: string[]\n   data: D\n}","import {BaseResponseType, instance} from './api-settings';\n\n\nexport const todolistAPI = {\n   updateTodolist(id: string, title: string) {\n      return instance.put<BaseResponseType>(`todo-lists/${id}`, {title});\n   },\n   deleteTodolist(id: string) {\n      return instance.delete<BaseResponseType>(`todo-lists/${id}`);\n   },\n   createTodolist(title: string) {\n      return instance.post<BaseResponseType<{item: TodolistType}>>('todo-lists', {title})\n   },\n   getTodolists() {\n      return instance.get<Array<TodolistType>>('todo-lists')\n   }\n}\n\n\n// types\nexport type TodolistType = {\n   id: string,\n   title: string,\n   addedDate: string,\n   order: number\n}\n","import {BaseResponseType, instance} from './api-settings';\n\n\nexport const authAPI = {\n   login(data: LoginParamsType) {\n      return instance.post<BaseResponseType<{userId: number}>>(`auth/login`, data);\n   },\n   logout() {\n      return instance.delete<BaseResponseType>(`auth/login`);\n   },\n   me() {\n      return instance.get<BaseResponseType<{id: number, email: string, login: string}>>(`auth/me`);\n   }\n}\n\n\n// types\nexport type LoginParamsType = {\n   email: string\n   password: string\n   rememberMe: boolean\n   captcha?: string\n}\n","import { Dispatch } from 'redux';\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer';\nimport {BaseResponseType} from '../api/api-settings';\n\n\n// generic function\nexport const handleServerAppError = <T>(data: BaseResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\n   if (data.messages.length) {\n      dispatch(setAppErrorAC(data.messages[0]))\n   } else {\n      dispatch(setAppErrorAC('Some error occurred'))\n   }\n   dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\n   dispatch(setAppErrorAC(error.message))\n   dispatch(setAppStatusAC('failed'))\n}\n\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>","import {Dispatch} from 'redux';\nimport {authAPI} from '../api/auth-api';\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer';\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\n\nenum APP_ACTIONS_TYPE {\n   SET_STATUS = 'APP/SET-STATUS',\n   SET_ERROR = 'APP/SET-ERROR',\n   SET_IS_INITIALIZED = 'APP/SET_IS_INITIALIZED',\n}\n\nconst initialState = {\n   status: 'idle' as RequestStatusType,\n   error: null as string | null,\n   isInitialized: false\n}\n\nexport type InitialStateType = typeof initialState\n\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsAppType): InitialStateType => {\n   switch (action.type) {\n      case APP_ACTIONS_TYPE.SET_STATUS:\n\n         return {...state, status: action.status}\n\n      case APP_ACTIONS_TYPE.SET_ERROR: {\n         return {...state, error: action.error}\n      }\n\n      case APP_ACTIONS_TYPE.SET_IS_INITIALIZED: {\n         return {...state, isInitialized: action.isInitialized}\n      }\n\n      default:\n         return state\n   }\n}\n\n\n// actions\nexport const setAppStatusAC = (status: RequestStatusType) =>\n   ({type: APP_ACTIONS_TYPE.SET_STATUS, status} as const);\n\nexport const setAppErrorAC = (error: null | string) =>\n   ({type: APP_ACTIONS_TYPE.SET_ERROR, error} as const);\n\nexport const setIsInitialized = (isInitialized: boolean) =>\n   ({type: APP_ACTIONS_TYPE.SET_IS_INITIALIZED, isInitialized} as const);\n\n\n// thunks\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n   authAPI.me().then(res => {\n      if (res.data.resultCode === 0) {\n         dispatch(setIsLoggedInAC(true));\n      } else {\n         handleServerAppError(res.data, dispatch)\n      }\n      dispatch(setIsInitialized(true));\n   })\n      .catch((error) => {\n         handleServerNetworkError(error, dispatch)\n      })\n}\n\n\n// types\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\n\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\n\ntype ActionsAppType =\n   | SetAppStatusActionType\n   | SetAppErrorActionType\n   | ReturnType<typeof setIsInitialized>","import {todolistAPI, TodolistType} from '../../api/todolist-api';\nimport {Dispatch} from 'redux';\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer';\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\n\n\nexport enum TODOLISTS_ACTIONS_TYPE {\n   REMOVE_TODOLIST = 'TODOLISTS/REMOVE-TODOLIST',\n   ADD_TODOLIST = 'TODOLISTS/ADD-TODOLIST',\n   CHANGE_TODOLIST_TITLE = 'TODOLISTS/CHANGE-TODOLIST-TITLE',\n   CHANGE_TODOLIST_FILTER = 'TODOLISTS/CHANGE-TODOLIST-FILTER',\n   SET_TODOLISTS = 'TODOLISTS/REDSET_TODOLISTS',\n   CHANGE_TODOLIST_ENTITY_STATUS = 'APP/CHANGE-TODOLIST-ENTITY-STATUS',\n}\n\nconst initialState: Array<TodolistDomainType> = [];\n\n\nexport const todolistsReducer =\n   (state: Array<TodolistDomainType> = initialState, action: ActionsTodolistsType): Array<TodolistDomainType> => {\n      switch (action.type) {\n         case TODOLISTS_ACTIONS_TYPE.REMOVE_TODOLIST:\n            return state.filter(todolist => todolist.id !== action.id)\n\n         case TODOLISTS_ACTIONS_TYPE.ADD_TODOLIST:\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state,];\n\n         case TODOLISTS_ACTIONS_TYPE.CHANGE_TODOLIST_TITLE:\n            return state.map(todolist => todolist.id === action.id ? {...todolist, title: action.title} : todolist);\n\n         case TODOLISTS_ACTIONS_TYPE.CHANGE_TODOLIST_FILTER:\n            return state.map(todolist => todolist.id === action.id ? {...todolist, filter: action.filter} : todolist);\n\n         case TODOLISTS_ACTIONS_TYPE.SET_TODOLISTS:\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}));\n\n         case TODOLISTS_ACTIONS_TYPE.CHANGE_TODOLIST_ENTITY_STATUS:\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl);\n\n         default:\n            return state;\n      }\n   }\n\n// actions\nexport const removeTodolistAC = (id: string) =>\n   ({type: TODOLISTS_ACTIONS_TYPE.REMOVE_TODOLIST, id}) as const;\n\nexport const addTodolistAC = (todolist: TodolistType) =>\n   ({type: TODOLISTS_ACTIONS_TYPE.ADD_TODOLIST, todolist}) as const;\n\nexport const changeTodolistTitleAC = (id: string, title: string) =>\n   ({type: TODOLISTS_ACTIONS_TYPE.CHANGE_TODOLIST_TITLE, id, title}) as const;\n\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\n   ({type: TODOLISTS_ACTIONS_TYPE.CHANGE_TODOLIST_FILTER, id, filter}) as const;\n\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\n   ({type: TODOLISTS_ACTIONS_TYPE.SET_TODOLISTS, todolists}) as const;\n\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) =>\n   ({type: TODOLISTS_ACTIONS_TYPE.CHANGE_TODOLIST_ENTITY_STATUS, id, entityStatus} as const);\n\n\n// thunks\nexport const getTodolistsTC = () =>\n   (dispatch: Dispatch<ActionsTodolistsType>) => {\n      dispatch(setAppStatusAC('loading'));\n\n      todolistAPI.getTodolists()\n         .then(res => {\n            dispatch(setTodolistsAC(res.data));\n            dispatch(setAppStatusAC('succeeded'));\n         })\n   }\n\nexport const removeTodolistTC = (id: string) =>\n   (dispatch: Dispatch<ActionsTodolistsType>) => {\n      dispatch(setAppStatusAC('loading'));\n      dispatch(changeTodolistEntityStatusAC(id, 'loading'));\n\n      todolistAPI.deleteTodolist(id)\n         .then((res) => {\n            if (res.data.resultCode === 0) {\n               dispatch(removeTodolistAC(id));\n               dispatch(setAppStatusAC('succeeded'));\n            } else {\n               handleServerAppError(res.data, dispatch);\n            }\n         })\n         .catch(error => {\n            handleServerNetworkError(error, dispatch);\n         })\n   }\n\nexport const addTodolistTC = (title: string) =>\n   (dispatch: Dispatch<ActionsTodolistsType>) => {\n      dispatch(setAppStatusAC('loading'));\n\n      todolistAPI.createTodolist(title)\n         .then((res) => {\n            if (res.data.resultCode === 0) {\n               dispatch(addTodolistAC(res.data.data.item));\n            } else {\n               handleServerAppError(res.data, dispatch);\n            }\n         })\n         .catch(error => {\n            handleServerNetworkError(error, dispatch);\n         })\n   }\n\nexport const changeTodolistTitleTC = (id: string, title: string) =>\n   (dispatch: Dispatch) => {\n      dispatch(setAppStatusAC('loading'));\n\n      todolistAPI.updateTodolist(id, title)\n         .then((res) => {\n            if (res.data.resultCode === 0) {\n               dispatch(changeTodolistTitleAC(id, title));\n               dispatch(setAppStatusAC('succeeded'));\n            } else {\n               handleServerAppError(res.data, dispatch);\n            }\n         })\n         .catch(error => {\n            handleServerNetworkError(error, dispatch);\n         })\n   }\n\n\n// types\nexport type FilterValuesType = 'all' | 'active' | 'completed';\n\nexport type TodolistDomainType = TodolistType & {\n   filter: FilterValuesType\n   entityStatus: RequestStatusType\n}\n\nexport type ActionsTodolistsType =\n   | ReturnType<typeof removeTodolistAC>\n   | ReturnType<typeof addTodolistAC>\n   | ReturnType<typeof changeTodolistTitleAC>\n   | ReturnType<typeof changeTodolistFilterAC>\n   | ReturnType<typeof setTodolistsAC>\n   | SetAppStatusActionType\n   | SetAppErrorActionType\n   | ReturnType<typeof changeTodolistEntityStatusAC>\n\n","import {BaseResponseType, instance} from './api-settings';\n\nexport enum TaskPriorities {\n   Low = 0,\n   Middle = 1,\n   Hi = 2,\n   Urgently = 3,\n   Later = 4\n}\n\nexport enum TaskStatusesType {\n   New = 0,\n   InProgress = 1,\n   Completed = 2,\n   Draft = 3\n}\n\n\nexport const tasksAPI = {\n   getTasks(\n      todolistId: string,\n      count: number = 10,\n      page: number = 1\n   ) {\n      return instance.get<ResponseGetTasksType>(`todo-lists/${todolistId}/tasks?count=${count}&page=${page}`);\n   },\n   createTask(\n      todolistId: string,\n      title: string\n   ) {\n      return instance.post<BaseResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title});\n   },\n   deleteTask(\n      todolistId: string,\n      taskId: string\n   ) {\n      return instance.delete<BaseResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n   },\n   updateTask(\n      todolistId: string,\n      taskId: string,\n      model: UpdateApiTaskModelType\n   ) {\n      return instance.put<BaseResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`,\n         model);\n   }\n}\n\n\n// types\nexport type TaskType = {\n   description: string\n   title: string\n   status: TaskStatusesType\n   priority: TaskPriorities\n   startDate: string\n   deadline: string\n   id: string\n   todoListId: string\n   order: number\n   addedDate: string\n}\n\nexport type UpdateApiTaskModelType = {\n   title: string\n   description: string\n   status: number\n   priority: number\n   startDate: string\n   deadline: string\n}\n\ntype ResponseGetTasksType = {\n   items: TaskType[],\n   totalCount: number,\n   error: string\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from '@material-ui/core';\nimport {AddBox} from '@material-ui/icons';\nimport {RequestStatusType} from '../../app/app-reducer';\n\nexport type AddItemFormPropsType = {\n   addItem: (title: string) => void\n   disabled?: boolean\n}\n\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\n   const [title, setTitle] = useState('');\n   const [error, setError] = useState<string | null>(null);\n\n   const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n      setTitle(e.currentTarget.value);\n   }\n\n   const add = () => {\n      if (title.trim() === '') {\n         setError('Field is required');\n         return;\n      }\n\n      props.addItem(title);\n      setTitle('');\n   }\n\n   const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n      if (error !== null) {\n         setError(null);\n      }\n\n      if (e.ctrlKey && e.key === 'Enter') {\n         add();\n      }\n   }\n\n   return (\n      <div>\n         <TextField variant='outlined'\n                    size='small'\n                    label='Title'\n                    value={title}\n                    onChange={onChangeTitleHandler}\n                    onKeyPress={onKeyPressHandler}\n                    helperText={error}\n                    error={!!error}\n                    disabled={props.disabled}\n         />\n         <IconButton onClick={add}\n                     color='primary'\n                     disabled={props.disabled}>\n            <AddBox/>\n         </IconButton>\n      </div>\n   );\n});","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from '@material-ui/core';\n\nexport type EditableSpanProps = {\n   title: string\n   onChange: (value: string) => void\n   disabled?: boolean\n}\n\nexport const EditableSpan = React.memo((props: EditableSpanProps) => {\n   let [editMode, setEditMode] = useState<boolean>(false);\n   let [title, setTitle] = useState<string>(props.title);\n\n   let onTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value);\n   const activateEditMode = () => {\n      props.disabled || setEditMode(true);\n   };\n   const deactivateEditMode = () => {\n      setEditMode(false);\n      props.onChange(title);\n   }\n\n   return editMode ?\n      <TextField value={title} onChange={onTitleChangeHandler} onBlur={deactivateEditMode} autoFocus/> :\n      <span onDoubleClick={activateEditMode}> {props.title} </span>;\n\n});","import {addTodolistAC, removeTodolistAC, setTodolistsAC, TODOLISTS_ACTIONS_TYPE} from './todolists-reducer';\nimport {tasksAPI, TaskType} from '../../api/task-api';\nimport {Dispatch} from 'redux';\nimport {AppRootStateType} from '../../app/store';\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer';\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\n\n\nenum TASKS_ACTIONS_TYPE {\n   REMOVE_TASK = 'TASKS/REMOVE-TASK',\n   ADD_TASK = 'TASKS/ADD-TASK',\n   UPDATE_TASK = 'TASKS/CHANGE-STATUS-TASK',\n   SET_TASKS = 'TASKS/SET-TASKS',\n   CHANGE_TASK_ENTITY_STATUS = 'APP/CHANGE-TASK-ENTITY-STATUS',\n}\n\nconst initialState: TasksType = {};\n\n\nexport const tasksReducer = (state: TasksType = initialState, action: ActionsTasksType): TasksType => {\n   switch (action.type) {\n      case TASKS_ACTIONS_TYPE.SET_TASKS:\n         return {...state, [action.todolistId]: action.tasks.map(t => ({...t, entityStatus: 'idle'}))}\n\n      case TASKS_ACTIONS_TYPE.REMOVE_TASK:\n         return {\n            ...state,\n            [action.todoListID]: state[action.todoListID].filter(task => task.id !== action.taskID)\n         }\n\n      case TASKS_ACTIONS_TYPE.ADD_TASK:\n         return {\n            ...state,\n            [action.task.todoListId]: [{...action.task, entityStatus: 'idle'}, ...state[action.task.todoListId]]\n         }\n\n      case TASKS_ACTIONS_TYPE.UPDATE_TASK:\n         return {\n            ...state,\n            [action.todoListID]: state[action.todoListID]\n               .map(task => task.id === action.taskID ?\n                  {...task, ...action.domainModel} :\n                  task)\n         }\n\n      case TASKS_ACTIONS_TYPE.CHANGE_TASK_ENTITY_STATUS:\n         return {\n            ...state,\n            [action.todolistId]: state[action.todolistId]\n               .map(t => t.id === action.id ? {...t, entityStatus: action.status} : t)\n         }\n\n      case TODOLISTS_ACTIONS_TYPE.ADD_TODOLIST:\n         return {...state, [action.todolist.id]: []}\n\n      case TODOLISTS_ACTIONS_TYPE.REMOVE_TODOLIST:\n         const {[action.id]: tasksOfRemoveTodolist, ...rest} = state;\n         return {...rest};\n\n      case TODOLISTS_ACTIONS_TYPE.SET_TODOLISTS: {\n         let copyState = {...state};\n\n         action.todolists.forEach(tl => {\n            copyState[tl.id] = [];\n         });\n\n         return copyState;\n      }\n\n      default:\n         return state;\n   }\n}\n\n\n// actions\nexport const addTaskAC = (task: TaskType) =>\n   ({type: TASKS_ACTIONS_TYPE.ADD_TASK, task}) as const;\n\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\n   ({type: TASKS_ACTIONS_TYPE.SET_TASKS, tasks, todolistId}) as const;\n\nexport const updateTaskAC = (taskID: string, domainModel: UpdateDomainTaskModelType, todoListID: string) =>\n   ({type: TASKS_ACTIONS_TYPE.UPDATE_TASK, domainModel, taskID, todoListID}) as const;\n\nexport const removeTaskAC = (todoListID: string, taskID: string) =>\n   ({type: TASKS_ACTIONS_TYPE.REMOVE_TASK, taskID, todoListID}) as const;\n\nexport const changeTaskEntityStatusAC = (id: string, status: RequestStatusType, todolistId: string) =>\n   ({type: TASKS_ACTIONS_TYPE.CHANGE_TASK_ENTITY_STATUS, id, status, todolistId} as const);\n\n\n// thunks\nexport const getTasksTC = (todolistId: string) =>\n   (dispatch: Dispatch<ActionsTasksType>) => {\n      dispatch(setAppStatusAC('loading'));\n\n      tasksAPI.getTasks(todolistId)\n         .then((res) => {\n            dispatch(setTasksAC(res.data.items, todolistId));\n            dispatch(setAppStatusAC('succeeded'));\n         })\n         .catch(error => {\n            handleServerNetworkError(error, dispatch);\n         })\n   }\n\nexport const addTaskTC = (todolistID: string, title: string) =>\n   (dispatch: Dispatch<ActionsTasksType>) => {\n      dispatch(setAppStatusAC('loading'));\n\n      tasksAPI.createTask(todolistID, title)\n         .then((res) => {\n            if (res.data.resultCode === 0) {\n               dispatch(addTaskAC(res.data.data.item));\n               dispatch(setAppStatusAC('succeeded'));\n            } else {\n               handleServerAppError(res.data, dispatch);\n            }\n         })\n         .catch(error => {\n            handleServerNetworkError(error, dispatch);\n         })\n   }\n\nexport const removeTaskTC = (todolistId: string, taskId: string) =>\n   (dispatch: Dispatch<ActionsTasksType>) => {\n      dispatch(setAppStatusAC('loading'));\n      dispatch(changeTaskEntityStatusAC(taskId, 'loading', todolistId));\n\n      tasksAPI.deleteTask(todolistId, taskId)\n         .then(res => {\n            if (res.data.resultCode === 0) {\n               dispatch(removeTaskAC(todolistId, taskId));\n               dispatch(setAppStatusAC('succeeded'));\n            } else {\n               handleServerAppError(res.data, dispatch);\n            }\n         })\n         .catch(error => {\n            handleServerNetworkError(error, dispatch);\n         })\n   }\n\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType) =>\n   (dispatch: Dispatch<ActionsTasksType>, getState: () => AppRootStateType) => {\n\n      const task = getState()\n         .tasks[todolistId]\n         .find(t => t.id === taskId);\n\n      if (task) {\n         dispatch(setAppStatusAC('loading'));\n         dispatch(changeTaskEntityStatusAC(taskId, 'loading', todolistId));\n\n         tasksAPI.updateTask(todolistId, taskId, {\n            title: task.title,\n            status: task.status,\n            startDate: task.startDate,\n            priority: task.priority,\n            description: task.description,\n            deadline: task.deadline,\n            ...domainModel\n         })\n            .then(res => {\n               if (res.data.resultCode === 0) {\n                  dispatch(updateTaskAC(taskId, domainModel, todolistId));\n                  dispatch(setAppStatusAC('succeeded'));\n                  dispatch(changeTaskEntityStatusAC(taskId, 'idle', todolistId));\n               } else {\n                  handleServerAppError(res.data, dispatch);\n               }\n            })\n            .catch(error => {\n               handleServerNetworkError(error, dispatch);\n            })\n      }\n   }\n\n\n// types\nexport type TaskDomainType = TaskType & {\n   entityStatus: RequestStatusType\n}\n\nexport type TasksType = {\n   [key: string]: Array<TaskDomainType>\n}\n\nexport type ActionsTasksType =\n   | ReturnType<typeof removeTaskAC>\n   | ReturnType<typeof addTaskAC>\n   | ReturnType<typeof updateTaskAC>\n   | ReturnType<typeof addTodolistAC>\n   | ReturnType<typeof removeTodolistAC>\n   | ReturnType<typeof setTodolistsAC>\n   | ReturnType<typeof setTasksAC>\n   | ReturnType<typeof changeTaskEntityStatusAC>\n   | SetAppStatusActionType\n   | SetAppErrorActionType;\n\nexport type UpdateDomainTaskModelType = {\n   title?: string\n   description?: string\n   status?: number\n   priority?: number\n   startDate?: string\n   deadline?: string\n}\n\n\n","import React, {ChangeEvent, useCallback} from 'react';\nimport {removeTaskTC, TaskDomainType, updateTaskTC} from '../../tasks-reducer';\nimport {Checkbox, IconButton} from '@material-ui/core';\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan';\nimport {Delete} from '@material-ui/icons';\nimport {TaskStatusesType} from '../../../../api/task-api';\nimport {useDispatch} from 'react-redux';\n\nexport type TaskProsType = {\n   task: TaskDomainType\n   todolistId: string\n   disabled: boolean\n}\nexport const Task: React.FC<TaskProsType> = React.memo((props) => {\n   const {task, todolistId, disabled} = props;\n\n   const dispatch = useDispatch();\n\n   const removeTask = () => {\n      dispatch(removeTaskTC(todolistId, task.id))\n   };\n\n   const changeStatusTaskHandler = (e: ChangeEvent<HTMLInputElement>) => {\n      dispatch(\n         updateTaskTC(\n            todolistId,\n            task.id,\n            {\n               status: e.currentTarget.checked ? TaskStatusesType.Completed : TaskStatusesType.New\n            }\n         )\n      )\n   }\n\n   const changeTitleTaskHandler = useCallback((title: string) => {\n      dispatch(updateTaskTC(todolistId, task.id, {title}));\n   }, []);\n\n   return (\n      <li key={task.id} className={task.status === TaskStatusesType.Completed ? 'is-done' : ''}>\n         <Checkbox checked={task.status === TaskStatusesType.Completed}\n                   color=\"primary\"\n                   onChange={changeStatusTaskHandler}\n                   disabled={disabled || task.entityStatus === 'loading'}\n         />\n\n         <EditableSpan title={task.title}\n                       onChange={changeTitleTaskHandler}\n                       disabled={disabled || task.entityStatus === 'loading'}\n         />\n\n         <IconButton onClick={removeTask} disabled={disabled || task.entityStatus === 'loading'}>\n            <Delete/>\n         </IconButton>\n      </li>\n   );\n});","import React, {useCallback, useEffect} from 'react';\n\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm';\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\nimport {Button, ButtonGroup, IconButton} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../../app/store';\nimport {addTaskTC, getTasksTC, TaskDomainType} from '../tasks-reducer';\nimport {\n   changeTodolistFilterAC,\n   changeTodolistTitleTC,\n   FilterValuesType,\n   removeTodolistTC,\n   TodolistDomainType\n} from '../todolists-reducer';\nimport {Task} from './Task/Task';\nimport {TaskStatusesType} from '../../../api/task-api';\n\ntype PropsType = {\n   id: string\n   demo?: boolean\n}\n\nexport const Todolist: React.FC<PropsType> = React.memo(({demo = false, ...props}) => {\n   useEffect(() => {\n      if (demo) {\n         return;\n      }\n      dispatch(getTasksTC(props.id));\n   }, []);\n\n   let dispatch = useDispatch();\n\n   let todolist = useSelector<AppRootStateType, TodolistDomainType>(state =>\n      state.todolists.filter(todolist => todolist.id === props.id)[0]);\n\n   let tasks = useSelector<AppRootStateType, Array<TaskDomainType>>(state => state.tasks[props.id]);\n   let filteredTasks = filterTasks(tasks, todolist.filter);\n\n   const addTask = useCallback((title: string) => {\n      dispatch(addTaskTC(todolist.id, title));\n   }, []);\n\n   const setAll = useCallback(() => dispatch(changeTodolistFilterAC(todolist.id, 'all')), []);\n   const setActive = useCallback(() => dispatch(changeTodolistFilterAC(todolist.id, 'active')), []);\n   const setCompleted = useCallback(() => dispatch(changeTodolistFilterAC(todolist.id, 'completed')), []);\n\n   const changeTodolistTitleHandler = useCallback((title: string) =>\n      dispatch(changeTodolistTitleTC(todolist.id, title)), []);\n\n   return (\n      <div>\n         <h3>\n            <EditableSpan title={todolist.title}\n                          onChange={changeTodolistTitleHandler}\n                          disabled={todolist.entityStatus === 'loading'}\n            />\n            <IconButton onClick={() => {\n               dispatch(removeTodolistTC(todolist.id));\n            }} disabled={todolist.entityStatus === 'loading'}>\n               <Delete/>\n            </IconButton>\n         </h3>\n\n         <AddItemForm addItem={addTask} disabled={todolist.entityStatus === 'loading'}/>\n\n         <ul style={{listStyleType: 'none', paddingLeft: '0'}}>\n            {\n               filteredTasks.map(task => <Task key={task.id}\n                                               task={task}\n                                               todolistId={todolist.id}\n                                               disabled={todolist.entityStatus === 'loading'}/>)\n            }\n         </ul>\n         <div>\n            <ButtonGroup>\n               <Button variant={todolist.filter === 'all' ? 'contained' : 'text'}\n                       color='default'\n                       onClick={setAll}\n                       className={todolist.filter === 'all' ? 'active-filter' : ''}>All</Button>\n               <Button variant={todolist.filter === 'active' ? 'contained' : 'text'}\n                       color='primary'\n                       onClick={setActive}\n                       className={todolist.filter === 'active' ? 'active-filter' : ''}>Active</Button>\n               <Button variant={todolist.filter === 'completed' ? 'contained' : 'text'}\n                       color='secondary'\n                       onClick={setCompleted}\n                       className={todolist.filter === 'completed' ? 'active-filter' : ''}>Completed\n               </Button>\n            </ButtonGroup>\n         </div>\n      </div>\n   );\n});\n\nconst filterTasks = (tasks: Array<TaskDomainType>, filter: FilterValuesType) => {\n   if (filter === 'completed') {\n      return tasks.filter(task => task.status = TaskStatusesType.Completed);\n   } else if (filter === 'active') {\n      return tasks.filter(task => task.status = TaskStatusesType.New);\n   }\n   return tasks;\n}\n\n","import React, {useCallback, useEffect} from 'react';\nimport {addTodolistTC, getTodolistsTC, TodolistDomainType} from './todolists-reducer';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../app/store';\nimport {Box, Grid, Paper} from '@material-ui/core';\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm';\nimport {Todolist} from './Todolist/Todolist';\nimport {Redirect} from 'react-router-dom';\n\ntype PropsType = {\n   demo?: boolean\n}\n\nexport const TodolistsList: React.FC<PropsType> = ({demo = false, ...props}) => {\n   useEffect(() => {\n      if (demo || !isLoggedIn) {\n         return;\n      }\n      dispatch(getTodolistsTC());\n   }, []);\n\n   let dispatch = useDispatch();\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n\n   const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists);\n\n   const addTodolist = useCallback((title: string) => {\n      dispatch(addTodolistTC(title));\n   }, []);\n\n   if (!isLoggedIn) {\n      return <Redirect to={'/login'}/>\n   }\n\n   return (\n      <>\n         <Grid container>\n            <Box p={2} pl={0}>\n               <AddItemForm addItem={addTodolist}/>\n            </Box>\n         </Grid>\n         <Grid container spacing={3}>\n            {todolists.map(todolist => {\n               return (\n                  <Grid item key={todolist.id}>\n                     <Paper>\n                        <Box p={2}>\n                           <Todolist key={todolist.id} id={todolist.id} demo={demo}/>\n                        </Box>\n                     </Paper>\n                  </Grid>\n               );\n            })}\n         </Grid>\n      </>\n   );\n}","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../app/store';\nimport {setAppErrorAC} from '../../app/app-reducer';\n\nfunction Alert(props: AlertProps) {\n   return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n   const dispatch = useDispatch();\n   const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\n\n   const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n      if (reason === 'clickaway') {\n         return\n      }\n\n      dispatch(setAppErrorAC(null));\n   }\n\n   const isOpen = error !== null;\n\n   return (\n      <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n         <Alert onClose={handleClose} severity=\"error\">\n            {error}\n         </Alert>\n      </Snackbar>\n   )\n}\n","import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useFormik} from 'formik';\nimport {loginTC} from './auth-reducer';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../app/store';\nimport {Redirect} from 'react-router-dom';\n\ntype FormikErrorType = {\n   email?: string\n   password?: string\n   rememberMe?: boolean\n}\n\n\nexport const Login = () => {\n   const dispatch = useDispatch();\n\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n\n   const formik = useFormik({\n      initialValues: {\n         email: '',\n         password: '',\n         rememberMe: false\n      },\n      validate: (values) => {\n         const errors: FormikErrorType = {};\n         if (!values.email) {\n            errors.email = 'Required';\n         } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n            errors.email = 'Invalid email address';\n         }\n\n         if (!values.password) {\n            errors.password = 'Required';\n         } else if (values.password.length <= 3) {\n            errors.password = 'Must be more characters than 3';\n         }\n\n         return errors;\n      },\n      onSubmit: values => {\n         dispatch(loginTC({...values}));\n         formik.resetForm();\n      },\n   })\n\n   if (isLoggedIn) {\n      return <Redirect to={'/'}/>\n   }\n\n   return <Grid container justify=\"center\">\n      <Grid item xs={4}>\n         <form onSubmit={formik.handleSubmit}>\n            <FormControl>\n               <FormLabel>\n                  <p>To log in get registered\n                     <a href={'https://social-network.samuraijs.com/'}\n                        target={'_blank'}>here\n                     </a>\n                  </p>\n                  <p>or use common test account credentials:</p>\n                  <p>Email: free@samuraijs.com</p>\n                  <p>Password: free</p>\n               </FormLabel>\n               <FormGroup>\n                  <TextField\n                     label=\"Email\"\n                     margin=\"normal\"\n                     {...formik.getFieldProps('email')}\n                  />\n                  {\n                     formik.touched.email &&\n                     formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null\n                  }\n\n                  <TextField\n                     type=\"password\"\n                     label=\"Password\"\n                     margin=\"normal\"\n                     {...formik.getFieldProps('password')}\n                  />\n                  {\n                     formik.touched.password &&\n                     formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null\n                  }\n\n                  <FormControlLabel\n                     label={'Remember me'}\n                     control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}\n                  />\n                  <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n               </FormGroup>\n            </FormControl>\n         </form>\n      </Grid>\n   </Grid>\n}\n\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\nimport {\n   AppBar,\n   Button,\n   CircularProgress,\n   Container,\n   IconButton,\n   LinearProgress,\n   Toolbar,\n   Typography\n} from '@material-ui/core';\nimport {Menu} from '@material-ui/icons';\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from './store';\nimport {initializeAppTC, RequestStatusType} from './app-reducer';\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport {Login} from '../features/Login/Login';\nimport {logoutTC} from '../features/Login/auth-reducer';\nimport {history} from '../index';\n\n\ntype PropsType = {\n   demo?: boolean\n}\n\nconst App: React.FC<PropsType> = ({demo = false, ...props}) => {\n   const dispatch = useDispatch();\n\n   const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\n   const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\n   const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\n\n   useEffect(() => {\n      dispatch(initializeAppTC());\n   }, []);\n\n   const loginHandler = useCallback(() => {\n      history.push('/login');\n   }, []);\n\n   const logoutHandler = useCallback(() => {\n      dispatch(logoutTC());\n   }, []);\n\n   if (!isInitialized) {\n      return <div\n         style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n         <CircularProgress/>\n      </div>\n   }\n\n   return (\n      <div className=\"App\">\n         <ErrorSnackbar/>\n         <AppBar position=\"static\">\n            <Toolbar>\n               {/*<IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                  <Menu/>\n               </IconButton>*/}\n               <Typography variant=\"h6\">\n                  TODOLISTS\n               </Typography>\n               {!isLoggedIn && <Button color=\"inherit\" onClick={loginHandler}>Login</Button>}\n               {isLoggedIn && <Button color='inherit' onClick={logoutHandler}>Log out</Button>}\n            </Toolbar>\n            {status === 'loading' && <LinearProgress/>}\n         </AppBar>\n         <Container fixed>\n            <Switch>\n               <Route path=\"/\" exact render={() => <TodolistsList demo={demo}/>}/>\n               <Route path=\"/login\" render={() => <Login/>}/>\n               <Route path='/404' render={() => <h1>404: PAGE NOT FOUND</h1>}/>\n               <Route path='*' render={() => <Redirect to='/404'/>}/>\n            </Switch>\n         </Container>\n      </div>\n   );\n}\n\nexport default App;\n\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\nimport {ActionsTodolistsType, todolistsReducer} from '../features/TodolistsList/todolists-reducer';\nimport {ActionsTasksType, tasksReducer} from '../features/TodolistsList/tasks-reducer';\nimport {useDispatch as _useDispatch} from 'react-redux';\nimport thunk from 'redux-thunk';\nimport {appReducer} from './app-reducer';\nimport {authReducer} from '../features/Login/auth-reducer';\n\nconst rootReducer = combineReducers({\n   todolists: todolistsReducer,\n   tasks: tasksReducer,\n   app: appReducer,\n   auth: authReducer\n});\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\n// export const store = createStore(rootReducer, applyMiddleware(thunk));\n\n// @ts-ignore\nwindow.store = store;\n\nexport const useDispatch = () => {\n   let dispatch = _useDispatch();\n   return (ac: ActionsTodolistsType | ActionsTasksType) => dispatch(ac);\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {Router} from 'react-router'\r\nimport createHistory from 'history/createBrowserHistory';\r\nimport {HashRouter} from 'react-router-dom';\r\n\r\nexport const history = createHistory();\r\n\r\n\r\nReactDOM.render(\r\n   <Provider store={store}>\r\n      <HashRouter>\r\n         <App/>\r\n      </HashRouter>\r\n   </Provider>\r\n   , document.getElementById('root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}